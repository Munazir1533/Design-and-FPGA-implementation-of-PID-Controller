##Verilog Code for Top Module

‘timescale 1ns / 1ps
module speed_measure ( input clk,rst,output [7:0] Anode_on, output [6:0] LED_on );
wire [15:0] freq_out;
wire out1;
wire [15:0] rpm;
reg [10:0] =0;
wire clk_50k;
reg [23:0] counter_2=0;
wire clk_12;
always @(posedge clk)
begin
if(rst==1)
<= 0;
else begin
if( >= ’d1999)
<= 0;
else
counter_1 <= counter_1 + 1;
end
end
assign clk_50k = counter_1[10];
always @(posedge clk)
begin
if(rst==1)
counter_2 <= 0;
else begin
if(counter_2 >= ’d9999999)
counter_2 <= 0;
else
counter_2 <= counter_2 + 1;
end
end
assign clk_12 = counter_2[23];
freq_measure freq_module(clk_50k,rst,clk_12,freq_out);
freq2rpm freq2rpm(clk_50k,{8’b0,freq_out},rpm,out1);
display display(clk,rpm,rst,Anode_on,LED_on);
endmodule



## frequency measure Module
‘timescale 1ns / 1ps
module freq_measure #(DATA_WIDTH = 16)(input clk,rst,pulse,output [DATA_WIDTH-1:0]out);
wire enA,enB;
wire rstA,rstB;
wire [DATA_WIDTH-1:0] CountA, CountB, count;
counter #(DATA_WIDTH)
countA(clk,rstA,enA,CountA);
counter #(DATA_WIDTH)
countB(clk,rstB,!enA,CountB);
control CTRL(clk,rst,pulse,enA,enB,rstA,rstB );
assign count = enA ? CountA : CountB;
register #(DATA_WIDTH)
regout(pulse,rst,1,count,out);
endmodule

##Counter Module
‘timescale 1ns / 1ps
module counter#(DATA_WIDTH = 12)(input clk, rst, en,output reg [DATA_WIDTH-1:0]count_1);
always @(posedge clk or posedge rst)
if(rst)
count_1<=0;
else if(en)
count_1<=count_1+1;
endmodule


## Frequency to RPM Module
‘timescale 1ns / 1ps
module freq2rpm(
input clk,
input [23:0] counter_value,
output [15:0] rpm,
output out1 );
reg [23:0] f_c = ’d50000;
wire [37:0] ans;
wire [31:0] Q;
div_gen_0 Div_1 (
.aclk(clk), // input wire aclk
.s_axis_divisor_tvalid(1), // input wire s_axis_divisor_tvalid
.s_axis_divisor_tdata(counter_value), //[23:0] divisor_tdata
.s_axis_dividend_tvalid(1), //input wire s_axis_dividend_tvalid
.s_axis_dividend_tdata(f_c), //[23:0] s_axis_dividend_tdata
.m_axis_dout_tvalid(out1), //output wire m_axis_dout_tvalid
.m_axis_dout_tdata(Q) ); //output wire [31:0] dout_tdata
assign ans = 6’d60 * Q;
assign rpm = ans[19:4];
endmodule


## Display Module
‘timescale 1ns/1ps
module display_2( input clk,
input reset, // reset
input [11:0] speed_in,
input [12:0] rpm,
output reg [7:0] Anode_on,
output reg [6:0] LED_on
);
reg [3:0] LED_BCD;
reg [19:0] refresh_counter_1; // refresh rate 380Hz
wire [2:0] LED_activating_counter_1;
always @(posedge clk or posedge reset)
begin
if(reset==1) refresh_counter_1 <= 0;
else refresh_counter_1 <= refresh_counter_1 + 1;
end
assign LED_activating_counter_1 = refresh_counter_1[19:17];
always @(*)
begin
case(LED_activating_counter_1)
3’b000: begin
Anode_on = 8’b01111111; //activate LED_1 and Deactivate LED_2, LED_3, LED_4
LED_BCD = speed_in / 1000; // the first digit of the 16-bit number
end
3’b001: begin
Anode_on = 8’b10111111; // activate LED_2 and Deactivate LED1, LED_3, LED_4
LED_BCD = (speed_in % 1000)/100; // the second digit of the 16-bit number
end
3’b010: begin
Anode_on = 8’b11011111; // activate LED_3 & Deactivate LED_2, LED_1, LED_4
LED_BCD = ((speed_in % 1000)%100)/10; //the third digit of the 16-bit number
end
3’b011: begin
Anode_on = 8’b11101111; // activate LED_4 and Deactivate LED_2, LED_3, LED1
LED_BCD = ((speed_in % 1000)%100)%10; //the fourth digit of the 16-bit no.
end
3’b100: begin
Anode_on = 8’b11110111; // activate LED_4 and Deactivate LED_2, LED_3, LED1
LED_BCD = rpm / 1000; // the fourth digit of the 16-bit number
end
3’b101: begin
Anode_on = 8’b11111011; // activate LED_4 and Deactivate LED_2, LED_3, LED1
LED_BCD = (rpm % 1000)/100; // the fourth digit of the 16-bit number
end
3’b110: begin
Anode_on = 8’b11111101; // activate LED_4 and Deactivate LED_2, LED_3, LED1
LED_BCD = ((rpm % 1000)%100)/10; // the fourth digit of the 16-bit number
end
3’b111: begin
Anode_on = 8’b11111110; //activate LED_4 and Deactivate LED_2, LED_3, LED1
LED_BCD = ((rpm % 1000)%100)%10; //the fourth digit of the 16-bit number
end
endcase
end
always @(*)
begin
case(LED_BCD)
4’b0000: LED_on = 7’b0000001; // "0"
4’b0001: LED_on = 7’b1001111; // "1"
4’b0010: LED_on = 7’b0010010; // "2"
4’b0011: LED_on = 7’b0000110; // "3"
4’b0100: LED_on = 7’b1001100; // "4"
4’b0101: LED_on = 7’b0100100; // "5"
4’b0110: LED_on = 7’b0100000; // "6"
4’b0111: LED_on = 7’b0001111; // "7"
4’b1000: LED_on = 7’b0000000; // "8"
4’b1001: LED_on = 7’b0000100; // "9"
default: LED_on = 7’b0000001; // "0"
endcase
end
endmodule
